/*
 * Name: Kaylee Pierce
 * Date Submitted: 09/17/2023
 * Lab Section: 002
 * Assignment Name: Lab 2: Infix to Postfix Conversion
 */

#include <iostream>
#include <string>
#include <stack>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

// This function is used to determine the order of operations 
int precedence(char oper) {
    if(oper == '*' || oper == '/' || oper == '%') {
        return 2;
    } else if (oper == '+' || oper == '-') {
        return 1;
    } else {
        return 0;
    }
}
 
// This function is to check for valid parentheses
bool isValid(string infix[], int length) {
    stack<char> stack;

    for (int i = 0; i < length; i++) {
        if (infix[i][0] == '(') {
            stack.push('(');
        } else if (infix[i][0] == ')') {
            if (stack.empty() || stack.top() != '(') {
                return false;
            }
            stack.pop();
        }
    }

    return stack.empty();
}


int infixToPostfix(string infix[], int length, string postfix[])
{
    int start = 0;

    if(!isValid(infix, length)) {
        return 0;
    }

    stack<string> stackString;
    stackString.push("P");

    for(int i = 0; i < length; i++) {
        if(isdigit(infix[i][0])) {
            postfix[start++] = infix[i];
        } else if(infix[i][0] == '(') {
            stackString.push(infix[i]);
        } else if(infix[i][0] == ')') {
            while(stackString.top()[0] != 'p' && stackString.top()[0] != '(') {
                string c = stackString.top();
                stackString.pop();
                postfix[start++] = c;
            }
            if(stackString.top()[0] == '(') {
                stackString.pop();
            }
        } else {
            while(stackString.top()[0] != 'p' && precedence(infix[i][0]) <= precedence(stackString.top()[0])) {
                string c = stackString.top();
                stackString.pop();
                postfix[start++] = c;
            }
            stackString.push(infix[i]);
        }
    }

    while(stackString.top()[0] != 'P') {
        string c = stackString.top();
        stackString.pop();
        postfix[start++] = c;
    }

    return start;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
/*int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}
*/